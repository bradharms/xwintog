#!/usr/bin/bash

set -e

# Location of the config file
declare -g __xwintog_configPath="$HOME/.xwintogrc"

# Command used to execute this script
declare -g __xwintog_script="$0"

# App identified by the command line
declare -g APP;

# Config options
declare -g WINDOW;
declare -g COMMAND;
declare -g FILTER;

__xwintog.main() {
  APP="$1";

  __xwintog.assertDeps;
  __xwintog.assertUsage;
  __xwintog.loadConfig;
  __xwintog.toggle;
}

__xwintog.assertDeps() {
  # Verify we have the system tools we need
  if ! which xdotool >/dev/null 2>&1 ; then
    echo 1>&2 "Error: xdotool is not installed. Please install it using the" \
      "appropriate steps for your operating system and try again.";
    exit 1;
  fi
}

__xwintog.assertUsage() {
  if [ -n "$APP" ]; then
    return;
  fi

  echo >&2 "Error: An app name is required.";
  echo >&2;
  echo >&2 "Usage: $__xwintog_script <APP_NAME>";
  echo >&2;
  echo >&2 "See http://github.com/bradharms/xwintog for more information."
  exit 1;
}

__xwintog.loadConfig() {
  # Load the configuration file if it exists, otherwise fail with an error.
  if [ -r "$__xwintog_configPath" ]; then
    source "$__xwintog_configPath";
  else
    echo 1>&2 "Error: Config file at \"$__xwintog_configPath\" not found. This " \
      "is needed to configure xwintog. Please create the file and fill it out according" \
      "to documentation and try again.";
    exit 1;
  fi

  # Verify all required parts of the app's config are present
  if [ -z "$WINDOW" ] || [ -z "$COMMAND" ]; then
    echo 1>&2 "Error: The following required details for app named \"$APP\" are missing from the xwintog configuration file:";
    echo 1>&2;
    if [ -z "$WINDOW" ]; then
      echo 1>&2 "  WINDOW=\"<WINDOW_ID_STRING>\""
    fi
    if [ -z "$COMMAND" ]; then
      echo 1>&2 "  COMMAND=\"<COMMAND>\"";
    fi;
    echo 1>&2;
    echo 1>&2 "Please fill out these missing details in the configuration file and try again.";
    exit 1;
  fi
}

__xwintog.toggle() {
  # Find the windows matching the search criteria
  declare winIds;
  winIds=$(xdotool search $WINDOW || true);

  # If a filter exists for the app, filter them
  if [ -n "$FILTER" ]; then
    winIds=$(echo "$winIds" | $FILTER)
  fi;

  # If no results were returned, assume we need to open the app
  if [ -z "$winIds" ]; then
    $COMMAND &
    exit 0;
  fi

  # Get the focused window
  declare fWinId;
  fWinId=$(xdotool getwindowfocus);

  # If any of the windows are the focused one, minimize it
  while IFS= read -r winId || [[ -n $winId ]]; do
    if [ "$fWinId" = "$winId" ]; then
      # If this is the focused window, minimize it
      xdotool windowminimize "$winId";
      return;
    fi
  done < <(printf '%s' "$winIds")

  # If none of the windows were focused, try to activate all of them
  while IFS= read -r winId || [[ -n $winId ]]; do
    xdotool windowactivate "$winId" 2>/dev/null || true;
  done < <(printf '%s' "$winIds")
}

__xwintog.main "$@"
